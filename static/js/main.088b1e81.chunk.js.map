{"version":3,"sources":["assets/logo.svg","components/Player/index.js","components/Transcription/index.js","services/apis.js","utils/consts.js","components/Loader/index.js","components/TranscriptionContainer/index.js","App.js","reportWebVitals.js","index.js"],"names":["Player","audio","getCurrentTime","className","src","customAdditionalControls","customVolumeControls","listenInterval","layout","onListen","e","target","currentTime","Transcription","speaker","start","end","data","useState","isSelected","setIsSelected","useEffect","alt","millis","minutes","Math","floor","seconds","toFixed","millisToMinutesAndSeconds","map","t","random","checkSubSelected","getDialog","url","a","axios","method","Loader","TranscriptionContainer","dialogs","setDialogs","isLoading","setIsLoading","res","getCompleteDialog","index","App","setCurrentTime","Logo","time","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.088b1e81.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.b6bcc1f1.svg\";","import \"./styles.css\";\r\nimport AudioPlayer from \"react-h5-audio-player\";\r\nimport \"react-h5-audio-player/lib/styles.css\";\r\nimport Forward10Icon from '@material-ui/icons/Forward10';\r\nimport Replay10Icon from '@material-ui/icons/Replay10';\r\n\r\nconst Player = ({ audio, getCurrentTime }) => {\r\n  return (\r\n    <div className=\"footer\">\r\n      <AudioPlayer\r\n        className=\"player\"\r\n        src={audio}\r\n        customAdditionalControls={[]}\r\n        customVolumeControls={[]}\r\n        listenInterval={50}\r\n        layout=\"horizontal-reverse\"\r\n        /* customIcons={[\r\n          {rewind: Replay10Icon},\r\n          {forward: Forward10Icon},\r\n        ]} */\r\n        onListen={(e) => getCurrentTime(e.target.currentTime)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Player;\r\n","import { useEffect, useState } from \"react\";\r\nimport \"./styles.css\";\r\n\r\nconst Transcription = ({ speaker, start, end, data, currentTime }) => {\r\n  const [isSelected, setIsSelected] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const checkSelected = () => {\r\n      if (currentTime >= start && currentTime <= end) {\r\n        setIsSelected(true);\r\n      } else {\r\n        setIsSelected(false);\r\n      }\r\n    };\r\n    checkSelected();\r\n  }, [currentTime]);\r\n\r\n\r\n    const checkSubSelected = (t) => {\r\n      if (currentTime >= t[1] && currentTime <= t[2]) {\r\n        return <span key={Math.random()} className=\"selectedText\">{t[0]} </span>\r\n      } else {\r\n        return <span key={Math.random()}>{t[0]} </span>\r\n      }\r\n    };\r\n\r\n\r\n  const millisToMinutesAndSeconds = (millis) => {\r\n    var minutes = Math.floor(millis / 60);\r\n    var seconds = ((millis % 60) / 1).toFixed(0);\r\n    return (\r\n      (minutes < 10 ? \"0\" : \"\") +\r\n      minutes +\r\n      \":\" +\r\n      (seconds < 10 ? \"0\" : \"\") +\r\n      seconds\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"transcription\">\r\n      <section className=\"transcription-header\">\r\n        <img\r\n          className=\"avatar\"\r\n          src={`https://ui-avatars.com/api/?name=${speaker}&rounded=true`}\r\n          alt=\"avatar\"\r\n        />\r\n        <p className=\"name\">{speaker}</p>\r\n        <p className=\"time\">{millisToMinutesAndSeconds(start)}</p>\r\n      </section>\r\n      <section className={`dialog ${isSelected && \"selected\"}`}>\r\n        <p>{data.map((t)=> checkSubSelected(t))}</p>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Transcription;\r\n","import axios from 'axios';\r\n\r\nconst getDialog = async(url) => {\r\n  try {\r\n    const { data } = await axios({\r\n      url,\r\n      method: \"GET\",\r\n    });\r\n    return data;\r\n  } catch (err) {\r\n    throw err;\r\n  }\r\n}\r\n\r\nexport {\r\n  getDialog\r\n}\r\n","const src ={\r\n  audio: 'https://riversidefm.s3.amazonaws.com/public/assignments/nicole/nicole.mp3',\r\n  dialog: 'https://riversidefm.s3.amazonaws.com/public/assignments/nicole/transcript.json',\r\n}\r\n\r\nexport{\r\n  src\r\n}","import './styles.css'\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"lds-dual-ring\"></div>\r\n  );\r\n}\r\n\r\nexport default Loader;\r\n","import { useEffect, useState } from \"react\";\r\nimport Transcription from \"../Transcription\";\r\nimport {getDialog} from \"../../services/apis\";\r\nimport {src} from '../../utils/consts';\r\nimport Loader from '../Loader';\r\n\r\nconst TranscriptionContainer = ({currentTime}) =>{\r\n  const [dialogs, setDialogs] = useState(); \r\n  const [isLoading, setIsLoading] = useState(true);\r\n  \r\n  useEffect(()=>{\r\n    const getCompleteDialog = async(url) => {\r\n      const res = await getDialog(url);\r\n      setDialogs(res);\r\n      setIsLoading(false);\r\n    }    \r\n    getCompleteDialog(src.dialog);\r\n  },[])\r\n\r\n  if(isLoading){\r\n    return <Loader />\r\n  }else{\r\n    return (\r\n      <div>\r\n        {\r\n          dialogs.map(({speaker, start, data, end}, index) => (\r\n            <Transcription key={index} speaker={speaker} start={start} end={end} data={data} currentTime={currentTime} />\r\n          ))\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n  \r\n}\r\n\r\nexport default TranscriptionContainer;","import { useState } from 'react';\nimport './App.css';\nimport Logo from './assets/logo.svg';\nimport Player from '../src/components/Player';\nimport TranscriptionContainer from './components/TranscriptionContainer';\nimport { src } from './utils/consts';\n\nfunction App() {\n  const [currentTime, setCurrentTime] = useState(0);\n  const getCurrentTime = (time) =>{\n    setCurrentTime(()=>time);\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img className=\"logo\" src={Logo} alt=\"Riverside.fm\" />\n      </header>\n      <TranscriptionContainer currentTime={currentTime}/>\n      <Player audio={src.audio} getCurrentTime={getCurrentTime}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}